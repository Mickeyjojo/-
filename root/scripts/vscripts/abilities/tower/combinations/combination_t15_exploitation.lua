LinkLuaModifier("modifier_combination_t15_exploitation", "abilities/tower/combinations/combination_t15_exploitation.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_combination_t15_exploitation_buff", "abilities/tower/combinations/combination_t15_exploitation.lua", LUA_MODIFIER_MOTION_NONE)
--Abilities
if combination_t15_exploitation == nil then
	combination_t15_exploitation = class({}, nil, BaseRestrictionAbility)
end
function combination_t15_exploitation:GetCastRange(vLocation, hTarget)
	return self:GetSpecialValueFor("radius")
end
function combination_t15_exploitation:OnSpellStart()
	local hCaster = self:GetCaster()
	local duration = self:GetSpecialValueFor("duration")

	hCaster:AddNewModifier(hCaster, self, "modifier_combination_t15_exploitation_buff", {duration=duration})
end
function combination_t15_exploitation:OnUpgrade()
	if self:GetLevel() == 1 then
		self:ToggleAutoCast()
	end
end
function combination_t15_exploitation:GetIntrinsicModifierName()
	return "modifier_combination_t15_exploitation"
end
function combination_t15_exploitation:IsHiddenWhenStolen()
	return false
end
---------------------------------------------------------------------
--Modifiers
if modifier_combination_t15_exploitation == nil then
	modifier_combination_t15_exploitation = class({})
end
function modifier_combination_t15_exploitation:IsHidden()
	return true
end
function modifier_combination_t15_exploitation:IsDebuff()
	return false
end
function modifier_combination_t15_exploitation:IsPurgable()
	return false
end
function modifier_combination_t15_exploitation:IsPurgeException()
	return false
end
function modifier_combination_t15_exploitation:IsStunDebuff()
	return false
end
function modifier_combination_t15_exploitation:AllowIllusionDuplicate()
	return false
end
function modifier_combination_t15_exploitation:OnCreated(params)
	if IsServer() then
		self:StartIntervalThink(AI_TIMER_TICK_TIME)
	end
end
function modifier_combination_t15_exploitation:OnRefresh(params)
	if IsServer() then
	end
end
function modifier_combination_t15_exploitation:OnDestroy()
	if IsServer() then
	end
end
function modifier_combination_t15_exploitation:OnIntervalThink()
	if IsServer() then
		local ability = self:GetAbility()
		if not IsValid(ability) then
			self:StartIntervalThink(-1)
			self:Destroy()
			return
		end

		local caster = ability:GetCaster()

		if not ability:GetAutoCastState() then
			return
		end

		if caster:IsTempestDouble() or caster:IsIllusion() then
			self:Destroy()
			return
		end

		local range = ability:GetSpecialValueFor("radius")
		local teamFilter = DOTA_UNIT_TARGET_TEAM_ENEMY
		local typeFilter = DOTA_UNIT_TARGET_BASIC+DOTA_UNIT_TARGET_HERO
		local flagFilter = DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES+DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE+DOTA_UNIT_TARGET_FLAG_NO_INVIS
		local order = FIND_CLOSEST
		local targets = FindUnitsInRadius(caster:GetTeamNumber(), caster:GetAbsOrigin(), nil, range, teamFilter, typeFilter, flagFilter, order, false)
		if targets[1] ~= nil and caster:IsAbilityReady(ability) then
			ExecuteOrderFromTable({
				UnitIndex = caster:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = ability:entindex(),
			})
		end
	end
end
---------------------------------------------------------------------
if modifier_combination_t15_exploitation_buff == nil then
	modifier_combination_t15_exploitation_buff = class({})
end
function modifier_combination_t15_exploitation_buff:IsHidden()
	return false
end
function modifier_combination_t15_exploitation_buff:IsDebuff()
	return false
end
function modifier_combination_t15_exploitation_buff:IsPurgable()
	return false
end
function modifier_combination_t15_exploitation_buff:IsPurgeException()
	return false
end
function modifier_combination_t15_exploitation_buff:IsStunDebuff()
	return false
end
function modifier_combination_t15_exploitation_buff:AllowIllusionDuplicate()
	return false
end
function modifier_combination_t15_exploitation_buff:OnCreated(params)
	self.radius = self:GetAbilitySpecialValueFor("radius")
	self.bonus_gold_ptg = self:GetAbilitySpecialValueFor("bonus_gold_ptg")
	if IsServer() then
		local iParticleID = ParticleManager:CreateParticle("particles/econ/courier/courier_beetlejaw/courier_beetlejaw_ambient_gold.vpcf", PATTACH_CUSTOMORIGIN, self:GetParent())
		ParticleManager:SetParticleControlEnt(iParticleID, 1, self:GetParent(), PATTACH_OVERHEAD_FOLLOW, nil, self:GetParent():GetAbsOrigin(), true)
		self:AddParticle(iParticleID, false, false, -1, false, true)
	end
	AddModifierEvents(MODIFIER_EVENT_ON_DEATH, self)
end
function modifier_combination_t15_exploitation_buff:OnRefresh(params)
	self.radius = self:GetAbilitySpecialValueFor("radius")
	self.bonus_gold_ptg = self:GetAbilitySpecialValueFor("bonus_gold_ptg")
end
function modifier_combination_t15_exploitation_buff:OnDestroy()
	RemoveModifierEvents(MODIFIER_EVENT_ON_DEATH, self)
end
function modifier_combination_t15_exploitation_buff:DeclareFunctions()
	return {
		-- MODIFIER_EVENT_ON_DEATH,
	}
end
function modifier_combination_t15_exploitation_buff:OnDeath(params)
	if IsServer() then
		local hVictim = params.unit
		if IsValid(hVictim) and hVictim:GetTeamNumber() ~= self:GetParent():GetTeamNumber() and self:GetParent():IsPositionInRange(hVictim:GetAbsOrigin(), self.radius) then
			local iBounty = hVictim:GetGoldBounty()
			local iBonusBounty = Round(iBounty * self.bonus_gold_ptg*0.01)

			local iPlayerID = self:GetParent():GetPlayerOwnerID()
			local hPlayer = self:GetParent():GetPlayerOwner()

			PlayerResource:ModifyGold(iPlayerID, iBonusBounty, false, DOTA_ModifyGold_Unspecified)

			local iParticleID = ParticleManager:CreateParticleForPlayer("particles/units/heroes/hero_alchemist/alchemist_lasthit_coins.vpcf", PATTACH_CUSTOMORIGIN, nil, hPlayer)
			ParticleManager:SetParticleControlEnt(iParticleID, 1, hVictim, PATTACH_CUSTOMORIGIN_FOLLOW, nil, hVictim:GetAbsOrigin(), true)
			ParticleManager:ReleaseParticleIndex(iParticleID)

			local vColor = Vector(255, 204, 0)
			local fDuration = 1
			local iNumber = math.ceil(iBonusBounty)
			if iNumber > 0 then
				local iParticleID = ParticleManager:CreateParticleForPlayer("particles/units/heroes/hero_alchemist/alchemist_lasthit_msg_gold.vpcf", PATTACH_CUSTOMORIGIN, nil, hPlayer)
				ParticleManager:SetParticleControlEnt(iParticleID, 0, hVictim, PATTACH_OVERHEAD_FOLLOW, nil, hVictim:GetAbsOrigin(), true)
				ParticleManager:SetParticleControl(iParticleID, 1, Vector(0, iNumber, 0))
				ParticleManager:SetParticleControl(iParticleID, 2, Vector(fDuration, #tostring(iNumber)+1, 0))
				ParticleManager:SetParticleControl(iParticleID, 3, vColor)
				ParticleManager:ReleaseParticleIndex(iParticleID)
			end
		end
	end
end